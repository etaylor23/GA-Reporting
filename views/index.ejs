<!DOCTYPE html>
<html lang="en">
<head>
    <title>dc.js - Pie Chart Example</title>
    <meta charset="UTF-8">
    <link rel="stylesheet" type="text/css" href="public/lib/dcjs/web/css/dc.css"/>
		<link rel="stylesheet" type="text/css" href="styles/main.css"/>
    <link rel="stylesheet" type="text/css" href="styles/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="styles/animate.min.css">
    <link rel="stylesheet" type="text/css" href="styles/demo.css">
    <link rel="stylesheet" type="text/css" href="styles/light-bootstrap-dashboard.css">
    <link rel="stylesheet" type="text/css" href="styles/pe-icon-7-stroke.css">
    <link rel="stylesheet" type="text/css" href="styles/font-awesome.css">

    <script type="text/javascript" src="app/lodash.js"></script>
  	<script type="text/javascript" src="https://rawgithub.com/mbostock/d3/master/d3.js"></script>
    <script type="text/javascript" src="https://rawgithub.com/NickQiZhu/dc.js/master/web/js/crossfilter.js"></script>
  	<script type="text/javascript" src="https://rawgithub.com/dc-js/dc.js/develop/dc.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.15/angular.js"></script>
    <script type="text/javascript" src="app/angular-dc.js"></script>
		<script type="text/javascript" src="app/angular-local-storage.min.js"></script>
    <script type="text/javascript" src="js/jquery-1.10.2.js"></script>
    <script type="text/javascript" src="js/bootstrap-checkbox-radio-switch.js"></script>
    <script type="text/javascript" src="js/bootstrap-notify.js"></script>
    <script type="text/javascript" src="js/bootstrap-select.js"></script>
    <script type="text/javascript" src="js/bootstrap.min.js"></script>
    <script type="text/javascript" src="js/demo.js"></script>
    <script type="text/javascript" src="js/light-bootstrap-dashboard.js"></script>

</head>
<body ng-app="app">
<!-- we nicely separate the view and the data. Here, all information concerning the way to display the data
is in the template -->

	<div class="wrapper">

    <div navigation></div>

    <div class="main-panel">
      <div class="content">
        <div ng-controller="testController" class="container-fluid">
          <div class="row">
            <div my-dashboard></div>
          </div>
        </div>
      </div>
    </div>
	</div>



<script type="text/javascript">
    var app = angular.module("app", ["angularDc","LocalStorageModule"]);

    app.controller('columns', ['$scope', '$http', function($scope, $http) {

      $scope.listColumns = function() {
        $http.get('/listColumns')
          .then(function(response) {
            console.log(response.data);
            $scope.listColumns = response.data;
          })
      }

      $scope.setColumn = function(id, type) {
        debugger;
        if(type === "METRIC") {
          if($scope.newChart.metrics === undefined) {
            $scope.newChart.metrics = []
          }
          //$scope.columnQuery = id;
          $scope.newChart.metrics.push(id);
        } else {
          if($scope.newChart.dimensions === undefined) {
            $scope.newChart.dimensions = []
          }
          //$scope.columnQuery = id;
          $scope.newChart.dimensions.push(id);
        }

        debugger;

      }

    }])

    app.controller('accounts', ['$scope', '$http', function($scope, $http) {
      $scope.selectProfile = function(profile) {
        debugger;
        //$scope.newChart.client = profile;
      }
      $scope.toggleWebPropertyList = function() {
        debugger;
        $scope.webPropertyList = $scope.webPropertyList === false ? true: false;
      }

      $scope.findClient = function(e, client) {
        console.log(e);
        console.log(client);
        console.log($scope.accounts)
        console.log("Yes")
      }

      $scope.listAccounts = function() {
        $scope.overlayOff = false;
        $http.get('/listAccounts',$scope.newComponent)
          .then(function(response) {
            console.log(response.data);
            $scope.accounts = response.data;
          })
      }

      $scope.setProfile = function(name) {
        $scope.query = name;
        $scope.overlayOff = true;
      }

      $scope.displayProfile = function(account) {
        console.log("TEST")

      }


      //$scope.listAccounts();
    }])

		app.controller('testController', ['$scope','$http','localStorageService', function($scope, $http, localStorageService) {
			$scope.init = function() {
        $scope.savedCharts = [];
			}

      $scope.buildCharts = function(data, additionalChart) {

          /* Create data and parse in crossfilter */
					var dataReal = data.data.rows;
					var ndxReal = crossfilter(dataReal);
					var parseDateReal = d3.time.format("%Y%m%d").parse;

          /* If the first value is a string and can be parsed as a date, then parse it */
          /* If date */
					dataReal.forEach(function(d) {
            if(typeof(d[0]) === "string" && parseDateReal(d[0]) instanceof Date) {
						    d[0] = parseDateReal(d[0]);
            } else {
              console.log("Could not parse as a date, its either already a date or is not in the correct format");
            }
					})

          /* If the first value is a date already, transform the default response to long month */
					dataReal.forEach(function(d) {
            if(d[0] instanceof Date) {
							var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
									d[4]=monthNames[d[0].getMonth()];
									console.log(d[4])
            }
					});

          /* If year, month, day */





          /* Can we write a metric/dimension rule generator that runs tests on incoming dimensions/metrics which subjects them to totalResults
          Is this dimension/metric a: date, number, string, blah blah then write the new rule to JSON.*/





          /* Here there be demons */

          /* Create a base dimension based on the charts displayDimension attribute.
          Question: What if you could choose multiple dimensions? - Does dc support this?
          */
          $scope.dimension = ndxReal.dimension(function(d) {
            return d[parseInt(data.config.data.chart.displayDimension)]
          })

          /* Create a base group based on the previos dimension and a hard coded first metric that comes back from GA */
          $scope.group=$scope.dimension.group().reduceSum(function(d) {return d[parseInt(data.config.data.chart.displayMetric[0])];});

          /* Creates a new dimension of a parsed date value from GA
          Question: Could this be replaced with $scope.dimension? */
          $scope.pureDate = ndxReal.dimension(function(d) {
            return d[0];
          })

          /* Gets the minimum and maximum of a dates
          Note: These can then be used in the chart definition
          Note: What about where dimension is not a date or number, but a string like ga:medium, the .x attribute needs new formatting - See logic below */
          /* If date */
          $scope.minDateReal = $scope.pureDate.bottom(1)[0][0];
					$scope.maxDateReal = $scope.pureDate.top(1)[0][0];

          /*If number ^^^ */

          /* If string ^^^ */

          /* Creates a new dimension of whatever is the first GA metric
          Note: metrics == groups and are presented on the Y axis */
          $scope.mainY = ndxReal.dimension(function(d) {
            return d[1];
          })

          /* Gets the minimum and maximum of the first metric
          Note: These can then be used in the chart definition
          Question: Can dc support doubled up labelling of axis? */
          $scope.minY = $scope.mainY.bottom(1000)[0][1];
          $scope.maxY = $scope.mainY.top(1000)[0][1];

          /* Creates the value to stack on top of the group */
          $scope.stack = $scope.pureDate.group().reduceSum(function(d) {
            return d[parseInt(data.config.data.chart.displayMetric[1])];
          });


          //additionalChart is actually always true in this new set up so we may not need this condition. It just pushes the new chart config into the savedCharts array
          if(typeof(additionalChart) !== "undefined") {
            $scope.savedCharts.push(additionalChart);
          } else {
            $scope.savedCharts = JSON.parse(localStorageService.get('test'));
          }

          $scope.displayChart = false;
          $scope.exposeForm = false;

      }

				$scope.exposeNewForm = function() {
					$scope.exposeForm = true;
				}

				$scope.addNewComponent = function(newChartVal) {

          //creates a new component from the information provided in the form
          //d3.time.scale().domain([minDateReal, maxDateReal]) changes to linear scale for testing, this needs generalising in the build chart phase but should be decided dynamically, maybe based on whether date exists? Maybe more general to cope with all possibilities
          //d3.scale.linear().domain([minDateReal, maxDateReal])
					$scope.newComponent = JSON.parse('{"ga":{"gaId": "' + newChartVal.client +'", "startDate" : "60daysAgo", "endDate" : "yesterday", "metrics" : ["' + newChartVal.metrics +'"], "dimensions" : "' + newChartVal.dimensions + '"}, "chart":{"name":"' + newChartVal.name + '","chartType": "' + newChartVal.type + '" , "chartGroup" : "groupTwo", "width" : "450", "height" : "280", "innerRadius" : "50", "dimension" : "dimension", "group" : "group", "groupName":"Hello", "renderArea" : true, "transitionDuration" : "1000", "margins" : "{top: 30, right: 50, bottom: 25, left: 40}", "stack" : "stack", "stackName":"World", "mouseZoomable" : "true", "x" : "d3.time.scale().domain([minDateReal, maxDateReal])","y" : "d3.scale.linear().domain([minY, maxY])", "round" : "d3.time.month.round", "xUnits" : "d3.time.months", "elasticY" : "true", "renderHorizontalGridLines" : "true", "legend" : "dc.legend().x(800).y(10).itemHeight(13).gap(5)", "brushOn" : "false", "class" : "dc-chart"}}');


          debugger;

          //hits endpoint with fully configured object... waiting for response... (this request should be moved to a factory/service soon)
					$http.post('/data',$scope.newComponent)
						.then(function(response) {

              //gets the initial config set which is an object that contains ga and chart configuration
              $scope.moreConfig = response.config.data;
              //gets the response data
              $scope.newData = response;

              //sets up two empty arrays to filter through metrics and dimensions returned from the ga api
              $scope.displayMetric = [];
              $scope.displayDimension = [];

              //looks through the response column headers and pushes them into display dropdowns on the front end. Essentially it uses the response to generate display options
              for(var i = 0; i < response.data.columnHeaders.length; i++) {
                  if(response.data.columnHeaders[i].columnType ==="DIMENSION") {
                    $scope.displayDimension.push({"name":response.data.columnHeaders[i].name, "position" : i})
                  } else {
                    $scope.displayMetric.push({"name":response.data.columnHeaders[i].name, "position" : i})
                  }
              }

              $scope.displayChart = true;
						})
				}

        $scope.configureDisplay = function(newChartVal) {
          //configures the display dropdown
          $scope.moreConfig.chart.displayMetric = newChartVal.displayGroup;
          $scope.moreConfig.chart.displayDimension = newChartVal.displayDimension;

          var displayGroupLabel = "";
          var displayDimensionLabel = "";
          //below doesnt label the correct way
          for(var i = 0; i < newChartVal.displayGroup.length; i++) {
            console.log(newChartVal.metrics[i])
            debugger;
            if(i == newChartVal.displayGroup.length-1) {
              displayGroupLabel += newChartVal.metrics[i];
            } else {
              displayGroupLabel += newChartVal.metrics[i] + " Vs ";
            }

            if(i == newChartVal.displayDimension.length-1) {
              displayDimensionLabel += newChartVal.dimensions[i];
            } else {
              displayDimensionLabel += newChartVal.dimensions[i] + " Vs ";
            }

            if(i == 0) {
              $scope.moreConfig.chart.groupName = newChartVal.metrics[i];
            } else {
              $scope.moreConfig.chart.stackName = newChartVal.metrics[i];
            }

          }
          debugger;
          $scope.moreConfig.chart.yAxisLabel = displayGroupLabel;
          $scope.moreConfig.chart.xAxisLabel = displayDimensionLabel;
          $scope.buildCharts($scope.newData, $scope.moreConfig);
        }


        $scope.init();

		}]);




		app.directive('myDashboard', function() {
		  return {
		    restrict: 'A',
		    templateUrl: 'app/dashboard.html'
		  };
		});

    app.directive('navigation', function() {
		  return {
		    restrict: 'A',
		    templateUrl: 'app/navigation.html'
		  };
		});

		app.directive('pieChart', function() {
			return {
				restrict: 'A',
		    templateUrl: 'app/pieChart.html'
			}
		})

		app.directive('lineChart', function() {
			return {
				restrict: 'A',
		    templateUrl: 'app/lineChart.html'
			}
		})

		app.directive('newGraph', function() {
			return {
				restrict: 'A',
		    templateUrl: 'app/newGraph.html'
			}
		})

    app.directive('accounts', function() {
      return {
        restrict: 'A',
        templateUrl: 'app/listAccounts.html'
      }
    })


</script>
</body>
</html>
